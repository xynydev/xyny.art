---
import GenartLayout from "@layouts/GenartLayout.astro";
---

<GenartLayout title="new2">
    <script>
        import { runP5Sketch } from "src/util/p5";

        runP5Sketch(async (p) => {
            let fonts = [
                {
                    font: await p.loadFont(
                        "https://fonts.googleapis.com/css2?family=Syne:wght@400..800&display=swap",
                    ),
                    range: [400, 800],
                },
                {
                    font: await p.loadFont(
                        "https://fonts.googleapis.com/css2?family=Recursive:wght@300..1000&display=swap",
                    ),
                    range: [300, 1000],
                },
                {
                    font: await p.loadFont(
                        "https://fonts.googleapis.com/css2?family=DynaPuff:wght@400..700&display=swap",
                    ),
                    range: [400, 700],
                },
                {
                    font: await p.loadFont(
                        "https://fonts.googleapis.com/css2?family=EB+Garamond:wght@400..800&display=swap",
                    ),
                    range: [400, 800],
                },
            ];

            let fontSize = 16;

            let messages: string[] = [];
            let idx = 0;
            let startIdx = 0;
            let startRow = 0;

            const socket = new WebSocket(
                "wss://jetstream2.us-east.bsky.network/subscribe?wantedCollections=app.bsky.feed.post",
            );
            socket.addEventListener("message", (event) => {
                let eventData = JSON.parse(event.data);
                let message = eventData?.commit?.record?.text;
                if (message === undefined || message === "") return;
                if (message.includes("\n")) {
                    message = message.split("\n")[0];
                }
                messages[idx] = message;
                idx = idx + 1;

                if (
                    idx >
                    Math.floor(
                        (p.height / fontSize) * (p.width / fontSize / 10) + 3,
                    )
                ) {
                    startRow = row(messages, 0);
                    messages = messages.slice(1);
                    idx = idx - 1;
                    startIdx++;
                }
            });

            return (p) => {
                p.background(255);

                p.translate(0, -0.05 * p.millis());

                let row = startRow;
                let rowWidth = [];
                for (let idx = 0; idx < messages.length; idx++) {
                    let i = startIdx + idx;

                    let message = messages[idx];
                    if (message === undefined) continue;

                    p.textStyle(p.ITALIC);

                    p.textSize(fontSize);
                    let font = fonts[i % fonts.length];

                    p.textFont(font.font);
                    p.textWeight(
                        p.map(p.sin(i), -1, 1, font.range[0], font.range[1]),
                    );

                    if (i === 0) {
                        p.text(message, 0, i * fontSize + fontSize / 2);
                    } else {
                        if (rowWidth[row] < p.width) {
                            p.text(
                                message,
                                rowWidth[row],
                                row * fontSize + fontSize / 2,
                            );
                            rowWidth[row] += p.textWidth(message);
                        } else {
                            row += 1;
                            rowWidth[row] = p.textWidth(message);
                            p.text(message, 0, row * fontSize + fontSize / 2);
                        }
                    }
                }
            };

            function row(messages: string[], idx: number): number {
                let row = startRow;
                let rowWidth = [];
                for (let i = 0; i < idx; i++) {
                    let message = messages[i];
                    if (message === undefined) continue;

                    p.textStyle(p.ITALIC);

                    p.textSize(fontSize);
                    let font = fonts[i % fonts.length];

                    p.textFont(font.font);
                    p.textWeight(
                        p.map(p.sin(i), -1, 1, font.range[0], font.range[1]),
                    );

                    if (i === 0) {
                        p.text(message, 0, i * fontSize + fontSize / 2);
                    } else {
                        if (rowWidth[row] < p.width) {
                            rowWidth[row] += p.textWidth(message);
                        } else {
                            row += 1;
                            rowWidth[row] = p.textWidth(message);
                        }
                    }
                }
                return row;
            }
        });
    </script>
</GenartLayout>
